#### System

[[plugins]] # Changes Vim working directory to project root
repo = 'airblade/vim-rooter'
hook_add = '''
  let g:rooter_patterns = ['.git/', 'Rakefile']
'''

[[plugins]] # Library for auto detect filetype
# Note: This plugin intend to call other plugins.
repo = 'Shougo/context_filetype.vim'

[[plugins]] # Auto detect and set filetype on cursor position
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']


#### Display, UI

[[plugins]] # Light-weight statusbar
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
  set noshowmode
  if !has('win32') && !has('gui_running')
    set t_Co=256
  endif
  " display ALE status
  let g:lightline = {
        \ 'active': {
        \   'left': [
        \       ['mode', 'paste'],
        \       ['readonly', 'filename', 'modified'],
        \       ['linter_status'],
        \       ['linter_engines'],
        \       ['fixer_engines'],
        \     ],
        \   },
        \ 'component_function': {
        \     'linter_status': 'MyLinterStatus',
        \     'linter_engines': 'MyLinterEngines',
        \     'fixer_engines': 'MyFixerEngines',
        \   }
        \}
'''


#### Tools

[[plugins]] # Asynchronous unite all interfaces
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap [denite] <Nop>
"nmap <C-u> [denite]

nnoremap <silent> [denite]f :<C-u>Denite file_rec<CR>
nnoremap <silent> [denite]l :<C-u>Denite line<CR>
nnoremap <silent> [denite]u :<C-u>Denite file_mru<CR>
nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>

" Open result of Denite-grep with unique buffer name
nnoremap <silent> [denite]g :<C-u>Denite grep
      \ -buffer-name=search-buffer-denite<CR>
" Reopen result of Denite-grep
nnoremap <silent> [denite]r :<C-u>Denite
      \ -resume -buffer-name=search-buffer-denite<CR>
" Go to the next result of Denite-grep
nnoremap <silent> [denite]n :<C-u>Denite
      \ -resume -buffer-name=search-buffer-denite -select=+1 -imediately<CR>
" Back to the previous result of Denite-grep
nnoremap <silent> [denite]p :<C-u>Denite
      \ -resume -buffer-name=search-buffer-denite -select=-1 -imediately<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'

#### Syntax, Color scheme

#[[plugins]] # Colorscheme collections
#repo = 'flazz/vim-colorschemes'

[[plugins]] # for light colorscheme
repo = 'NLKNguyen/papercolor-theme'

[[plugins]] # for dark colorscheme
repo = 'jonathanfilip/vim-lucius'

[[plugins]] # Toml syntax highlight
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Git wrapper so awesome.
repo = 'tpope/vim-fugitive'

#### Lint

[[plugins]] # ALE: Asynchronous Lint Engine
repo = 'w0rp/ale'
hook_add = '''
  " Keep the sign gutter open at all times
  let g:ale_sign_column_always = 1
  let g:ale_linter = {
        \   'javascript': ['eslint'],
        \   'json': ['jsonlint'],
        \   'python': ['flake8'],
        \   'sh': ['shellcheck'],
        \   'swift': ['swiftlint'],
        \   'vim': ['vint'],
        \}
  let g:ale_fixers = {
        \   'c': ['clang-format'],
        \   'cpp': ['clang-format'],
        \   'html': ['prettier'],
        \   'javascript': ['prettier'],
        \   'markdown': ['prettier'],
        \   'python': ['yapf'],
        \   'swift': ['swiftformat'],
        \}
  function! MyLinterStatus() abort
    " return string which indicate warning and errors detected by linter.
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? '●' : printf(
                \   '▲%d ×%d',
                \   all_non_errors,
                \   all_errors
                \)
  endfunction
  function! MyLinterEngines() abort
    " return string which is list of enabled linters.
    let l:linters = has_key(g:ale_linter, &filetype) ?
          \ join(g:ale_linter[&filetype], ',') : '-'
    return printf('Linter:%s', l:linters)
  endfunction
  function! MyFixerEngines() abort
    " return string which is list of enabled fixers.
    let l:fixers= has_key(g:ale_fixers, &filetype) ?
          \ join(g:ale_fixers[&filetype], ',') : '-'
    return printf('Fixer:%s', l:fixers)
  endfunction
'''


#### Completion

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  augroup deoplete
    autocmd!
    autocmd FileType java setlocal omnifunc=javacomplete#Complete
  augroup END
'''
hook_done_update = '''
  UpdateRemotePlugins
'''
